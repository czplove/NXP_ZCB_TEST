2016/12/18 20:39:22
整体框架是这样的一个主线程和一个接收线程.
主线程接收终端的命令主动进行发送.
接收线程一直等待处理接收到的数据.
接收线程应该有部分自动应答的能力,以便实现通讯流.
接收线程利用了一个技巧:在准备发送一个消息之后启动一个分离线程去完成发送,自己仅仅再负责接收.
程序的整个框架应该已经通了,首先串口协议明确了,其次host部分作为主机控制整个协议流的传输,node部分
(dongle)完成无线的交互,上面仅仅需要达到应用目的即可,目前可以使用控制终端进行交互,可以使用接收函数
完成部分自动流程,如果我需要最终使用的话,只需要编写代码接收主动控制命令,下面上送的信息在接收函数内
实现自动应答和上送即可.

整体框架已经了解了,下面需要做的就是应用它,并熟悉整个流程细节,在使用的过程中不停的向最终目标靠近.

2016/12/19 星期一 上午 9:03:24
第一步:
ZBGWUI:
使用Erase PD恢复出厂设置
Set CMSK设置信道
Start NWK建立网络
Permit FFFC FE允许加网
ZCB:
erasepdm恢复出厂设置
setcmsk 0x17设置信道
startnwk建立网络
permitjoin 240允许加网

命令的顺序其中有一个特色就是从机会应答下接收到的命令的状态,然后再应答结果.
即从机对接收到的消息都会应答一次,然后再具体实际执行.

通过实例查看,数据交换已经没有难点了,下面就是组织数据形成应用.

实例:C.1. Gateway Start-up 

$ Input test command(type help for cmd usage)>reset
Host->Node 0x0011 (Length    0)

	Node->Host 0x8000 (Length    4) 0x00 0x00 0x00 0x11$ Input test command(type help for cmd usage)>
	Node->Host 0x8003 (Length   29) 0x01 0x01 0x04 0x00 0x00 0x00 0x01 0x00 0x03 0x00 0x04 0x00 0x05 0x00 0x06 0x00 0x08 0x00 0x19 0x01 0x01 0x10 0x00 0x03 0x00 0x02 0x01 0x02 0x04
	Node->Host 0x8003 (Length   23) 0x01 0x01 0x04 0x04 0x05 0x05 0x00 0x04 0x00 0x04 0x02 0x04 0x03 0x04 0x05 0x04 0x06 0x07 0x02 0x0B 0x03 0x0B 0x04
	Node->Host 0x8003 (Length    5) 0x02 0xC0 0x5E 0x10 0x00
	Node->Host 0x8004 (Length   14) 0x01 0x01 0x04 0x00 0x00 0x00 0x00 0x00 0x01 0x00 0x02 0x00 0x03 0x00
	Node->Host 0x8005 (Length    6) 0x01 0x01 0x04 0x00 0x00 0x00
	Node->Host 0x8004 (Length    6) 0x01 0x01 0x04 0x00 0x01 0x00
	Node->Host 0x8005 (Length    8) 0x01 0x01 0x04 0x00 0x01 0x00 0x01 0x40
	Node->Host 0x8004 (Length    6) 0x01 0x01 0x04 0x00 0x03 0x00
	Node->Host 0x8005 (Length   11) 0x01 0x01 0x04 0x00 0x03 0x00 0x01 0x02 0x03 0x04 0x05
	Node->Host 0x8004 (Length   11) 0x01 0x01 0x04 0x00 0x04 0x00 0x00 0x00 0x01 0x00 0x02
	Node->Host 0x8005 (Length   15) 0x01 0x01 0x04 0x00 0x04 0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x40 0x41 0x42
	Node->Host 0x8004 (Length    9) 0x01 0x01 0x04 0x00 0x05 0x00 0x00 0x40 0x00
	Node->Host 0x8005 (Length   11) 0x01 0x01 0x04 0x00 0x05 0x00 0x01 0x02 0x40 0x41 0x42
	Node->Host 0x8004 (Length    9) 0x01 0x01 0x04 0x00 0x06 0x00 0x00 0x00 0x01
	Node->Host 0x8005 (Length   14) 0x01 0x01 0x04 0x00 0x06 0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08
	Node->Host 0x8004 (Length   37) 0x01 0x01 0x04 0x00 0x08 0x00 0x00 0x00 0x01 0x00 0x02 0x00 0x07 0x00 0x08 0x00 0x10 0x00 0x11 0x00 0x12 0x00 0x13 0x00 0x15 0x00 0x16 0x00 0x17 0x00 0x19 0x00 0x1A 0x00 0x20 0x00 0x21
	Node->Host 0x8005 (Length   26) 0x01 0x01 0x04 0x00 0x08 0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08 0x09 0x0A 0x40 0x41 0x42 0x43 0x44 0x47 0x4B 0x4C 0xFE 0xFF
	Node->Host 0x8004 (Length   12) 0x01 0x01 0x04 0x00 0x19 0x00 0x00 0x00 0x03 0x00 0x04 0x00
	Node->Host 0x8005 (Length    6) 0x01 0x01 0x04 0x00 0x19 0x00
	Node->Host 0x8004 (Length    9) 0x01 0x01 0x04 0x01 0x01 0x00 0x00 0x00 0x01
	Node->Host 0x8005 (Length    6) 0x01 0x01 0x04 0x01 0x01 0x00
	Node->Host 0x8004 (Length    7) 0x01 0x01 0x04 0x10 0x00 0x00 0x20
	Node->Host 0x8005 (Length    6) 0x01 0x01 0x04 0x10 0x00 0x00
	Node->Host 0x8004 (Length   10) 0x01 0x01 0x04 0x03 0x00 0x00 0x00 0x00 0x01 0x00
	Node->Host 0x8005 (Length    6) 0x01 0x01 0x04 0x03 0x00 0x00
	Node->Host 0x8004 (Length    8) 0x01 0x01 0x04 0x02 0x01 0x00 0x00 0x00
	Node->Host 0x8005 (Length    6) 0x01 0x01 0x04 0x02 0x01 0x00
	Node->Host 0x8004 (Length   11) 0x01 0x01 0x04 0x02 0x04 0x00 0x00 0x03 0x00 0x03 0x01
	Node->Host 0x8005 (Length    6) 0x01 0x01 0x04 0x02 0x04 0x00
	Node->Host 0x8005 (Length   21) 0x02 0xC0 0x5E 0x10 0x00 0x00 0x01 0x02 0x03 0x06 0x07 0x10 0x11 0x12 0x13 0x14 0x15 0x16 0x40 0x41 0x42
	Node->Host 0x8024 (Length   12) 0x01 0x00 0x00 0x00 0x15 0x8D 0x00 0x00 0xD3 0x3A 0x38 0x17
	Nwk formed on Channel 23, panid=0x0000

	Node->Host 0x8006 (Length    1) 0x04
	ZCB Nwk already formed.

	Node->Host 0x8001 (Length   32) 0x06 0x53 0x74 0x61 0x63 0x6B 0x20 0x6C 0x6F 0x77 0x20 0x77 0x61 0x74 0x65 0x72 0x20 0x6D 0x61 0x72 0x6B 0x20 0x3D 0x20 0x30 0x34 0x30 0x30 0x36 0x36 0x39 0x63
	<ZCB log, level 6>: Stack low water mark = 0400669c

	Node->Host 0x8001 (Length   27) 0x06 0x2A 0x2A 0x20 0x43 0x6F 0x6E 0x74 0x72 0x6F 0x6C 0x20 0x42 0x72 0x69 0x64 0x67 0x65 0x20 0x52 0x65 0x73 0x65 0x74 0x2A 0x2A 0x20
	<ZCB log, level 6>: ** Control Bridge Reset** 
	IPN config is: RF_request_pin=0x1, status_pin=0x2, grant_pin=0x800, poll_period=0x3E
Host->Node 0x0800 (Length   17) 0x01  0x00  0x00  0x00  0x01  0x00  0x00  0x00  0x02  0x00  0x00  0x08  0x00  0x00  0x00  0x3E  0x04 

	Node->Host 0x8000 (Length    4) 0x02 0x00 0x08 0x00	*** IPN config fail, status=2.

2016/12/20 星期二 上午 10:32:01
允许加网并有一个终端设备成功加网:
$ Input test command(type help for cmd usage)>permitjoin 240
	permit join duration=240
Host->Node 0x0049 (Length    4) 0xFF  0xFC  0xF0  0x00 

	Node->Host 0x8000 (Length    4) 0x00 0x18 0x00 0x49	Permit join sucessfully.
$ Input test command(type help for cmd usage)>
	Node->Host 0x004D (Length   11) 0x1E 0x35 0x00 0x15 0x8D 0x00 0x00 0xF4 0xD4 0x82 0x80
	Device Joined, Address 0x1E35 (0x00158D0000F4D482). Mac Capability Mask 0x80

	Node->Host 0x8701 (Length    2) 0x00 0x00

Get Version 0x0010
$ Input test command(type help for cmd usage)>getversion
Host->Node 0x0010 (Length    0)

	Node->Host 0x8000 (Length    4) 0x00 0x00 0x00 0x10
	Node->Host 0x8010 (Length    4) 0x03 0xF0 0x05 0xBE
	Node->Host 0x8000 (Length    4) 0x00 0x00 0x00 0x10$ Input test command(type help for cmd usage)>

写属性命令,目前特指为了完成安防设备的enroll登记,而发送的设置 IAS Zone 的IAS_CIE_Address 属性。
$ Input test command(type help for cmd usage)>writeattr 0xbf9c 0x0500 0x01 0x0010 0xf0 0x0102030405060708
	dstAddr=0xBF9C, ClusterId=0x0500, u8Direction=0x01, AttrId=0x0010, AttrType=0xF0, AttrDate=0x102030405060708, 
Send Write Attribute request to 0xBF9C
Host->Node 0x0110 (Length   23) 0x07  0xBF  0x9C  0x01  0x01  0x05  0x00  0x01  0x01  0x10  0x37  0x01  0x00  0x10  0xF0  0x01  0x02  0x03  0x04  0x05  0x06  0x07  0x08 

	Node->Host 0x8000 (Length    4) 0x00 0x0A 0x01 0x10
	Node->Host 0x8702 (Length   13) 0xD3 0x01 0x01 0x02 0xBF 0x9C 0x00 0x05 0x00 0x00 0x00 0x15 0xED
	Node->Host 0x8001 (Length   34) 0x06 0x57 0x72 0x69 0x74 0x65 0x20 0x41 0x74 0x74 0x72 0x69 0x62 0x75 0x74 0x65 0x20 0x50 0x61 0x79 0x6C 0x6F 0x61 0x64 0x20 0x53 0x69 0x7A 0x65 0x20 0x3D 0x20 0x31 0x31
	<ZCB log, level 6>: Write Attribute Payload Size = 11

	Node->Host 0x8001 (Length   38) 0x06 0x57 0x72 0x69 0x74 0x65 0x20 0x41 0x74 0x74 0x72 0x69 0x62 0x75 0x74 0x65 0x20 0x53 0x69 0x7A 0x65 0x20 0x3D 0x20 0x38 0x2C 0x20 0x4F 0x66 0x66 0x73 0x65 0x74 0x20 0x3D 0x20 0x31 0x36
	<ZCB log, level 6>: Write Attribute Size = 8, Offset = 16
Got data indication
Got write attribute response
eZCB_WriteAttributeRequest returned status 17
$ Input test command(type help for cmd usage)>

紧接着IAS CIE 将会主动发送“Zone Enroll Response”设置 Zone ID。
0x0400明天完成这个的信息发送,也许是自动的连锁反应,而不是主动发送.
writeattr 0xbfc9 0x0500 0x01 0x0010 0xf0 0x00158D0000D33A38









